export const enum SyntaxKind {
  Unknown,
  EndOfFileToken,
  SingleLineCommentTrivia,
  MultiLineCommentTrivia,
  NewLineTrivia,
  WhitespaceTrivia,
  ShebangTrivia,
  ConflictMarkerTrivia,
  NonTextFileMarkerTrivia,
  NumericLiteral,
  BigIntLiteral,
  StringLiteral,
  JsxText,
  JsxTextAllWhiteSpaces,
  RegularExpressionLiteral,
  NoSubstitutionTemplateLiteral,
  TemplateHead,
  TemplateMiddle,
  TemplateTail,
  OpenBraceToken,
  CloseBraceToken,
  OpenParenToken,
  CloseParenToken,
  OpenBracketToken,
  CloseBracketToken,
  DotToken,
  DotDotDotToken,
  SemicolonToken,
  CommaToken,
  QuestionDotToken,
  LessThanToken,
  LessThanSlashToken,
  GreaterThanToken,
  LessThanEqualsToken,
  GreaterThanEqualsToken,
  EqualsEqualsToken,
  ExclamationEqualsToken,
  EqualsEqualsEqualsToken,
  ExclamationEqualsEqualsToken,
  EqualsGreaterThanToken,
  PlusToken,
  MinusToken,
  AsteriskToken,
  AsteriskAsteriskToken,
  SlashToken,
  PercentToken,
  PlusPlusToken,
  MinusMinusToken,
  LessThanLessThanToken,
  GreaterThanGreaterThanToken,
  GreaterThanGreaterThanGreaterThanToken,
  AmpersandToken,
  BarToken,
  CaretToken,
  ExclamationToken,
  TildeToken,
  AmpersandAmpersandToken,
  BarBarToken,
  QuestionToken,
  ColonToken,
  AtToken,
  QuestionQuestionToken,
  BacktickToken,
  HashToken,
  EqualsToken,
  PlusEqualsToken,
  MinusEqualsToken,
  AsteriskEqualsToken,
  AsteriskAsteriskEqualsToken,
  SlashEqualsToken,
  PercentEqualsToken,
  LessThanLessThanEqualsToken,
  GreaterThanGreaterThanEqualsToken,
  GreaterThanGreaterThanGreaterThanEqualsToken,
  AmpersandEqualsToken,
  BarEqualsToken,
  BarBarEqualsToken,
  AmpersandAmpersandEqualsToken,
  QuestionQuestionEqualsToken,
  CaretEqualsToken,
  Identifier,
  PrivateIdentifier,
  JSDocCommentTextToken,
  BreakKeyword,
  CaseKeyword,
  CatchKeyword,
  ClassKeyword,
  ConstKeyword,
  ContinueKeyword,
  DebuggerKeyword,
  DefaultKeyword,
  DeleteKeyword,
  DoKeyword,
  ElseKeyword,
  EnumKeyword,
  ExportKeyword,
  ExtendsKeyword,
  FalseKeyword,
  FinallyKeyword,
  ForKeyword,
  FunctionKeyword,
  IfKeyword,
  ImportKeyword,
  InKeyword,
  InstanceOfKeyword,
  NewKeyword,
  NullKeyword,
  ReturnKeyword,
  SuperKeyword,
  SwitchKeyword,
  ThisKeyword,
  ThrowKeyword,
  TrueKeyword,
  TryKeyword,
  TypeOfKeyword,
  VarKeyword,
  VoidKeyword,
  WhileKeyword,
  WithKeyword,
  ImplementsKeyword,
  InterfaceKeyword,
  LetKeyword,
  PackageKeyword,
  PrivateKeyword,
  ProtectedKeyword,
  PublicKeyword,
  StaticKeyword,
  YieldKeyword,
  AbstractKeyword,
  AccessorKeyword,
  AsKeyword,
  AssertsKeyword,
  AssertKeyword,
  AnyKeyword,
  AsyncKeyword,
  AwaitKeyword,
  BooleanKeyword,
  ConstructorKeyword,
  DeclareKeyword,
  GetKeyword,
  InferKeyword,
  IntrinsicKeyword,
  IsKeyword,
  KeyOfKeyword,
  ModuleKeyword,
  NamespaceKeyword,
  NeverKeyword,
  OutKeyword,
  ReadonlyKeyword,
  RequireKeyword,
  NumberKeyword,
  ObjectKeyword,
  SatisfiesKeyword,
  SetKeyword,
  StringKeyword,
  SymbolKeyword,
  TypeKeyword,
  UndefinedKeyword,
  UniqueKeyword,
  UnknownKeyword,
  UsingKeyword,
  FromKeyword,
  GlobalKeyword,
  BigIntKeyword,
  OverrideKeyword,
  OfKeyword, // LastKeyword and LastToken and LastContextualKeyword
  QualifiedName,
  ComputedPropertyName,
  TypeParameter,
  Parameter,
  Decorator,
  PropertySignature,
  PropertyDeclaration,
  MethodSignature,
  MethodDeclaration,
  ClassStaticBlockDeclaration,
  Constructor,
  GetAccessor,
  SetAccessor,
  CallSignature,
  ConstructSignature,
  IndexSignature,
  TypePredicate,
  TypeReference,
  FunctionType,
  ConstructorType,
  TypeQuery,
  TypeLiteral,
  ArrayType,
  TupleType,
  OptionalType,
  RestType,
  UnionType,
  IntersectionType,
  ConditionalType,
  InferType,
  ParenthesizedType,
  ThisType,
  TypeOperator,
  IndexedAccessType,
  MappedType,
  LiteralType,
  NamedTupleMember,
  TemplateLiteralType,
  TemplateLiteralTypeSpan,
  ImportType,
  ObjectBindingPattern,
  ArrayBindingPattern,
  BindingElement,
  ArrayLiteralExpression,
  ObjectLiteralExpression,
  PropertyAccessExpression,
  ElementAccessExpression,
  CallExpression,
  NewExpression,
  TaggedTemplateExpression,
  TypeAssertionExpression,
  ParenthesizedExpression,
  FunctionExpression,
  ArrowFunction,
  DeleteExpression,
  TypeOfExpression,
  VoidExpression,
  AwaitExpression,
  PrefixUnaryExpression,
  PostfixUnaryExpression,
  BinaryExpression,
  ConditionalExpression,
  TemplateExpression,
  YieldExpression,
  SpreadElement,
  ClassExpression,
  OmittedExpression,
  ExpressionWithTypeArguments,
  AsExpression,
  NonNullExpression,
  MetaProperty,
  SyntheticExpression,
  SatisfiesExpression,
  TemplateSpan,
  SemicolonClassElement,
  Block,
  EmptyStatement,
  VariableStatement,
  ExpressionStatement,
  IfStatement,
  DoStatement,
  WhileStatement,
  ForStatement,
  ForInStatement,
  ForOfStatement,
  ContinueStatement,
  BreakStatement,
  ReturnStatement,
  WithStatement,
  SwitchStatement,
  LabeledStatement,
  ThrowStatement,
  TryStatement,
  DebuggerStatement,
  VariableDeclaration,
  VariableDeclarationList,
  FunctionDeclaration,
  ClassDeclaration,
  InterfaceDeclaration,
  TypeAliasDeclaration,
  EnumDeclaration,
  ModuleDeclaration,
  ModuleBlock,
  CaseBlock,
  NamespaceExportDeclaration,
  ImportEqualsDeclaration,
  ImportDeclaration,
  ImportClause,
  NamespaceImport,
  NamedImports,
  ImportSpecifier,
  ExportAssignment,
  ExportDeclaration,
  NamedExports,
  NamespaceExport,
  ExportSpecifier,
  MissingDeclaration,
  ExternalModuleReference,
  JsxElement,
  JsxSelfClosingElement,
  JsxOpeningElement,
  JsxClosingElement,
  JsxFragment,
  JsxOpeningFragment,
  JsxClosingFragment,
  JsxAttribute,
  JsxAttributes,
  JsxSpreadAttribute,
  JsxExpression,
  JsxNamespacedName,
  CaseClause,
  DefaultClause,
  HeritageClause,
  CatchClause,
  ImportAttributes,
  ImportAttribute,
  /** @deprecated */ AssertClause = ImportAttributes,
  /** @deprecated */ AssertEntry = ImportAttribute,
  /** @deprecated */ ImportTypeAssertionContainer,
  PropertyAssignment,
  ShorthandPropertyAssignment,
  SpreadAssignment,
  EnumMember,
  SourceFile,
  Bundle,
  JSDocTypeExpression,
  JSDocNameReference,
  JSDocMemberName, // C#p
  JSDocAllType, // The * type
  JSDocUnknownType, // The ? type
  JSDocNullableType,
  JSDocNonNullableType,
  JSDocOptionalType,
  JSDocFunctionType,
  JSDocVariadicType,
  JSDocNamepathType, // https://jsdoc.app/about-namepaths.html
  JSDoc,
  JSDocComment = JSDoc,
  JSDocText,
  JSDocTypeLiteral,
  JSDocSignature,
  JSDocLink,
  JSDocLinkCode,
  JSDocLinkPlain,
  JSDocTag,
  JSDocAugmentsTag,
  JSDocImplementsTag,
  JSDocAuthorTag,
  JSDocDeprecatedTag,
  JSDocClassTag,
  JSDocPublicTag,
  JSDocPrivateTag,
  JSDocProtectedTag,
  JSDocReadonlyTag,
  JSDocOverrideTag,
  JSDocCallbackTag,
  JSDocOverloadTag,
  JSDocEnumTag,
  JSDocParameterTag,
  JSDocReturnTag,
  JSDocThisTag,
  JSDocTypeTag,
  JSDocTemplateTag,
  JSDocTypedefTag,
  JSDocSeeTag,
  JSDocPropertyTag,
  JSDocThrowsTag,
  JSDocSatisfiesTag,
  JSDocImportTag,
  SyntaxList,
  NotEmittedStatement,
  PartiallyEmittedExpression,
  CommaListExpression,
  SyntheticReferenceExpression,
  Count,
  FirstAssignment = EqualsToken,
  LastAssignment = CaretEqualsToken,
  FirstCompoundAssignment = PlusEqualsToken,
  LastCompoundAssignment = CaretEqualsToken,
  FirstReservedWord = BreakKeyword,
  LastReservedWord = WithKeyword,
  FirstKeyword = BreakKeyword,
  LastKeyword = OfKeyword,
  FirstFutureReservedWord = ImplementsKeyword,
  LastFutureReservedWord = YieldKeyword,
  FirstTypeNode = TypePredicate,
  LastTypeNode = ImportType,
  FirstPunctuation = OpenBraceToken,
  LastPunctuation = CaretEqualsToken,
  FirstToken = Unknown,
  LastToken = LastKeyword,
  FirstTriviaToken = SingleLineCommentTrivia,
  LastTriviaToken = ConflictMarkerTrivia,
  FirstLiteralToken = NumericLiteral,
  LastLiteralToken = NoSubstitutionTemplateLiteral,
  FirstTemplateToken = NoSubstitutionTemplateLiteral,
  LastTemplateToken = TemplateTail,
  FirstBinaryOperator = LessThanToken,
  LastBinaryOperator = CaretEqualsToken,
  FirstStatement = VariableStatement,
  LastStatement = DebuggerStatement,
  FirstNode = QualifiedName,
  FirstJSDocNode = JSDocTypeExpression,
  LastJSDocNode = JSDocImportTag,
  FirstJSDocTagNode = JSDocTag,
  LastJSDocTagNode = JSDocImportTag,
  /** @internal */ FirstContextualKeyword = AbstractKeyword,
  /** @internal */ LastContextualKeyword = OfKeyword,
}